[tool.poetry]
name = "configflow"
version = "0.0.1"
description = "ConfigFlow â€“ is the configuration management library for Python."
license = "MIT"
authors = [
    "Volodymyr Pivoshenko <volodymyr.pivoshenko@gmail.com>",
]
maintainers = [
    "Volodymyr Pivoshenko <volodymyr.pivoshenko@gmail.com>",
]
keywords = [
    "configuration",
    "config",
    "setup",
    "settings",
    "management",
    "pydantic",
]
homepage = "..."  # TODO add link to the readthedocs
documentation = "..."  # TODO add link to the readthedocs
repository = "..."  # TODO add link to the GitHub
readme = "README.md"
classifiers = [
    "Development Status :: 1 - Planning",
    "License :: OSI Approved :: MIT",
    "Operating System :: OS Independent",
    "Environment :: Other Environment",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Framework :: Pydantic",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering",
    "Natural Language :: English",
]
packages = [{ include = "configflow", from = "src" }]
include = [
    "README.md",
]

[tool.poetry.dependencies]
python = ">=3.8,<3.10"
# data structures
PyYAML = "^5.3.1"
python-dotenv = "^0.19.2"
toml = "^0.10.2"
# functionality
awesome-pattern-matching = "^0.24.2"

[tool.poetry.dev-dependencies]
# formatters
isort = "^5.10.1"
pycln = "^1.1.0"
black = "^21.12b0"
# linters
wemake-python-styleguide = "^0.16.0"
mypy = "^0.930"
dotenv-linter = "^0.3.0"
# flake8 extensions
pyproject-flake8 = "^0.0.1a.2"
flake8-html = "^0.4.1"
# mypy stubs
types-toml = "^0.10.1"
types-PyYAML = "^6.0.1"
# tests
tox = "^3.24.5"
pytest = "^6.2.5"
xdoctest = "^0.15.10"
# tests' extensions
tox-conda = "^0.9.1"
pytest-datafiles = "^2.0"
pytest-lazy-fixture = "^0.6.3"
pytest-mock = "^3.6.1"
pytest-cov = "^3.0.0"
pytest-sugar = "^0.9.4"
pytest-html = "^3.1.1"
coverage = { extras = ["toml"], version = "^6.2" }
coverage-badge = "^1.1.0"
# fakers
Faker = "^11.1.0"
# documentation
Sphinx = "^4.3.2"
sphinx-rtd-theme = "^1.0.0"
# data structures
lxml = "^4.7.1"
# git
pre-commit = "^2.16.0"
# repl
ipython = "^7.30.1"
deepdiff = "^5.7.0"

[tool.pycln]
all = true
exclude = "__init__.py"

[tool.isort]
profile = "black"
line_length = 100
lines_after_imports = 2
lines_between_types = 1
atomic = false
color_output = true
force_single_line = true
length_sort_straight = true
include_trailing_comma = false
force_alphabetical_sort_within_sections = true

[tool.black]
line-length = 100
target-version = ["py38", "py39"]
include = '\.pyi?$'

[tool.flake8]
max-line-length = 100
max-cognitive-score = 20
max-line-complexity = 15
max-imports = 15
inline-quotes = '"'
docstring_style = "numpy"
exclude = [
    "conftest.py",
    "__init__.py"
]
extend-ignore = """
    S101,
    D202, DAR101, DAR201, DAR401, DAR402,
    WPS348,
    WPS437
"""
# S101 - asserts are used only in tests
# D202 - code is hard to read without blank line
# DAR101, DAR201, DAR401, DAR402 - there's no sense to put all sections in small functions
# WPS348 - chaining is a good option for multiline methods calls
# WPS437 - some classes doesn't have public attributes that we require

[tool.mypy]
python_version = "3.8"
warn_unused_configs = true
ignore_missing_imports = true
files = [
    "src",
    "tests",
]

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]

[tool.coverage.run]
omit = [
    "*/__init__.py",
    "*/enums.py",
]

[tool.poetry.build]
generate-setup-file = false

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
